// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/yonidavidson/entsideeffecthooksexample/ent/cloud"
	"github.com/yonidavidson/entsideeffecthooksexample/ent/dogs"
	"github.com/yonidavidson/entsideeffecthooksexample/ent/users"
)

// Users is the model entity for the Users schema.
type Users struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsersQuery when eager-loading is set.
	Edges       UsersEdges `json:"edges"`
	users_dog   *int
	users_cloud *int
}

// UsersEdges holds the relations/edges for other nodes in the graph.
type UsersEdges struct {
	// Dog holds the value of the dog edge.
	Dog *Dogs `json:"dog,omitempty"`
	// Cloud holds the value of the cloud edge.
	Cloud *Cloud `json:"cloud,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DogOrErr returns the Dog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsersEdges) DogOrErr() (*Dogs, error) {
	if e.loadedTypes[0] {
		if e.Dog == nil {
			// The edge dog was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dogs.Label}
		}
		return e.Dog, nil
	}
	return nil, &NotLoadedError{edge: "dog"}
}

// CloudOrErr returns the Cloud value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsersEdges) CloudOrErr() (*Cloud, error) {
	if e.loadedTypes[1] {
		if e.Cloud == nil {
			// The edge cloud was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cloud.Label}
		}
		return e.Cloud, nil
	}
	return nil, &NotLoadedError{edge: "cloud"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Users) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			values[i] = new(sql.NullInt64)
		case users.FieldName:
			values[i] = new(sql.NullString)
		case users.ForeignKeys[0]: // users_dog
			values[i] = new(sql.NullInt64)
		case users.ForeignKeys[1]: // users_cloud
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Users", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Users fields.
func (u *Users) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case users.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case users.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case users.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_dog", value)
			} else if value.Valid {
				u.users_dog = new(int)
				*u.users_dog = int(value.Int64)
			}
		case users.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_cloud", value)
			} else if value.Valid {
				u.users_cloud = new(int)
				*u.users_cloud = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDog queries the "dog" edge of the Users entity.
func (u *Users) QueryDog() *DogsQuery {
	return (&UsersClient{config: u.config}).QueryDog(u)
}

// QueryCloud queries the "cloud" edge of the Users entity.
func (u *Users) QueryCloud() *CloudQuery {
	return (&UsersClient{config: u.config}).QueryCloud(u)
}

// Update returns a builder for updating this Users.
// Note that you need to call Users.Unwrap() before calling this method if this Users
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Users) Update() *UsersUpdateOne {
	return (&UsersClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Users entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Users) Unwrap() *Users {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Users is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Users) String() string {
	var builder strings.Builder
	builder.WriteString("Users(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteByte(')')
	return builder.String()
}

// UsersSlice is a parsable slice of Users.
type UsersSlice []*Users

func (u UsersSlice) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
