// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/yonidavidson/ent-side-effect-hooks-example/ent/dog"
	"github.com/yonidavidson/ent-side-effect-hooks-example/ent/user"
)

// Dog is the model entity for the Dog schema.
type Dog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DogQuery when eager-loading is set.
	Edges     DogEdges `json:"edges"`
	user_pets *int
}

// DogEdges holds the relations/edges for other nodes in the graph.
type DogEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DogEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dog.FieldID:
			values[i] = new(sql.NullInt64)
		case dog.FieldName:
			values[i] = new(sql.NullString)
		case dog.ForeignKeys[0]: // user_pets
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dog fields.
func (d *Dog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_pets", value)
			} else if value.Valid {
				d.user_pets = new(int)
				*d.user_pets = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Dog entity.
func (d *Dog) QueryOwner() *UserQuery {
	return (&DogClient{config: d.config}).QueryOwner(d)
}

// Update returns a builder for updating this Dog.
// Note that you need to call Dog.Unwrap() before calling this method if this Dog
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dog) Update() *DogUpdateOne {
	return (&DogClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dog) Unwrap() *Dog {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dog is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dog) String() string {
	var builder strings.Builder
	builder.WriteString("Dog(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Dogs is a parsable slice of Dog.
type Dogs []*Dog

func (d Dogs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
