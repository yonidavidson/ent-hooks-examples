// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yonidavidson/entsideeffecthooksexample/ent/desiredschema"
	"github.com/yonidavidson/entsideeffecthooksexample/ent/predicate"
)

// DesiredSchemaUpdate is the builder for updating DesiredSchema entities.
type DesiredSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *DesiredSchemaMutation
}

// Where appends a list predicates to the DesiredSchemaUpdate builder.
func (dsu *DesiredSchemaUpdate) Where(ps ...predicate.DesiredSchema) *DesiredSchemaUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetAlias sets the "alias" field.
func (dsu *DesiredSchemaUpdate) SetAlias(s string) *DesiredSchemaUpdate {
	dsu.mutation.SetAlias(s)
	return dsu
}

// SetValue sets the "value" field.
func (dsu *DesiredSchemaUpdate) SetValue(s string) *DesiredSchemaUpdate {
	dsu.mutation.SetValue(s)
	return dsu
}

// Mutation returns the DesiredSchemaMutation object of the builder.
func (dsu *DesiredSchemaUpdate) Mutation() *DesiredSchemaMutation {
	return dsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DesiredSchemaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dsu.hooks) == 0 {
		if err = dsu.check(); err != nil {
			return 0, err
		}
		affected, err = dsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DesiredSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsu.check(); err != nil {
				return 0, err
			}
			dsu.mutation = mutation
			affected, err = dsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dsu.hooks) - 1; i >= 0; i-- {
			if dsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DesiredSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DesiredSchemaUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DesiredSchemaUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DesiredSchemaUpdate) check() error {
	if v, ok := dsu.mutation.Alias(); ok {
		if err := desiredschema.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "DesiredSchema.alias": %w`, err)}
		}
	}
	if v, ok := dsu.mutation.Value(); ok {
		if err := desiredschema.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DesiredSchema.value": %w`, err)}
		}
	}
	return nil
}

func (dsu *DesiredSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   desiredschema.Table,
			Columns: desiredschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: desiredschema.FieldID,
			},
		},
	}
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.Alias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: desiredschema.FieldAlias,
		})
	}
	if value, ok := dsu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: desiredschema.FieldValue,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{desiredschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DesiredSchemaUpdateOne is the builder for updating a single DesiredSchema entity.
type DesiredSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DesiredSchemaMutation
}

// SetAlias sets the "alias" field.
func (dsuo *DesiredSchemaUpdateOne) SetAlias(s string) *DesiredSchemaUpdateOne {
	dsuo.mutation.SetAlias(s)
	return dsuo
}

// SetValue sets the "value" field.
func (dsuo *DesiredSchemaUpdateOne) SetValue(s string) *DesiredSchemaUpdateOne {
	dsuo.mutation.SetValue(s)
	return dsuo
}

// Mutation returns the DesiredSchemaMutation object of the builder.
func (dsuo *DesiredSchemaUpdateOne) Mutation() *DesiredSchemaMutation {
	return dsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DesiredSchemaUpdateOne) Select(field string, fields ...string) *DesiredSchemaUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DesiredSchema entity.
func (dsuo *DesiredSchemaUpdateOne) Save(ctx context.Context) (*DesiredSchema, error) {
	var (
		err  error
		node *DesiredSchema
	)
	if len(dsuo.hooks) == 0 {
		if err = dsuo.check(); err != nil {
			return nil, err
		}
		node, err = dsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DesiredSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dsuo.check(); err != nil {
				return nil, err
			}
			dsuo.mutation = mutation
			node, err = dsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dsuo.hooks) - 1; i >= 0; i-- {
			if dsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DesiredSchemaUpdateOne) SaveX(ctx context.Context) *DesiredSchema {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DesiredSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DesiredSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DesiredSchemaUpdateOne) check() error {
	if v, ok := dsuo.mutation.Alias(); ok {
		if err := desiredschema.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "DesiredSchema.alias": %w`, err)}
		}
	}
	if v, ok := dsuo.mutation.Value(); ok {
		if err := desiredschema.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "DesiredSchema.value": %w`, err)}
		}
	}
	return nil
}

func (dsuo *DesiredSchemaUpdateOne) sqlSave(ctx context.Context) (_node *DesiredSchema, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   desiredschema.Table,
			Columns: desiredschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: desiredschema.FieldID,
			},
		},
	}
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DesiredSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, desiredschema.FieldID)
		for _, f := range fields {
			if !desiredschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != desiredschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.Alias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: desiredschema.FieldAlias,
		})
	}
	if value, ok := dsuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: desiredschema.FieldValue,
		})
	}
	_node = &DesiredSchema{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{desiredschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
